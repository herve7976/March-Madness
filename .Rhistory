help(findFreqTerms)
findFreqTerms(dtm.tfidf12,1)
findFreqTerms(dtm.tfidf12,0)
aggregate(desc.parsed ~ PRIZM_LIFESTAGE, hackothon_dataset, function(e) { paste(e, collapse=" ")}) -> barbla
Corpus(DataframeSource(data.frame(docs=barbla$desc.parsed,row.names=barbla$ID_CLIENT))) -> corpus -> corpusbla
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(global = c(2,Inf)),weighting=weightTfIdf))
dtm.tfidf12=removeSparseTerms(dtm.tfidf1, 0.99985)
dtm.tfidf12
findFreqTerms(dtm.tfidf12, 2)
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(global = c(1,Inf)),weighting=weightTfIdf))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(weighting=weightTfIdf))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(weighting=weightTfIdf)))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(weighting=weightTfIdf)))
dtm.tfidf12=removeSparseTerms(dtm.tfidf1, 0.99985)
findFreqTerms(dtm.tfidf12, 2)
1
str(dtm.tfidf1)
bears=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
library(XML)
bears=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
library(data.table)
library(data.table)
bears=data.table(bears)
view(bears)
View(bears)
head(bears)
STR(bears)
str(bears)
names(bears)
bears[1]
bears[[1]]
lapply(bears,typeof)
lapply(bears[[1]],typeof)
lapply(bears[[1]][[3]],typeof)
bears[[1]][[3]]
lapply(split(bears,bears$v1),funtion(x) sum(x))
lapply(split(bears,bears$v1),funtion(x) sum(x$v2))
lapply(split(bears,bears$v1),sum(x))
lapply(split(bears,bears$v1),function(x)sum(x))
lapply(split(bears,bears$v1),function(x)sum(x$v2))
split(bears,bears$v1)
lapply(split(bears,bears[[3]]$v1),function(x)sum(x$v2))
bears[[1]][[3]]
lapply(split(bears,bears[[1]][[3]]$v1),function(x)sum(x$v2))
lapply(split(bears,bears[[1]][[3]]$v1),function(x) mean(x$v2))
split(bears,bears[[1]][[3]]$v1)
lapply(split(bears,bears[[1]][[3]]$V1),function(x) mean(x$V2))
lapply(split(bears,bears[[1]][[3]]$V1),function(x) sum(x$V2))
bears[[1]][[3]]
bears,bears[[1]][[3]]$V1)
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) sum(x$V2))
bears[[1]][[3]],bears[[1]][[3]]$V1)
split(bears[[1]][[3]],bears[[1]][[3]]$V1)
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) x$V2))
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) x$V2)
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) sum(x$V2))
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) x$V2)
help(fread)
1+1
require(data.tabe)
require(data.table)
help(fread)
bears_roster=readHTMLTable("http://www.chicagobears.com/team/roster.html")
library(XML)
library(data.table)
bears_roster=readHTMLTable("http://www.chicagobears.com/team/roster.html")
bears_statistics=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
View(bears_statistics)
str(bears_statistics)
bears_injury=readHTMLTable("http://www.chicagobears.com/team/injury-report.html")
str(bears_ijury)
str(bears_injury)
data_sport= fread(file.choose())
data_titanic= fread(file.choose())
data_titanic= fread(file.choose())
fread("sed 's/\\0//g' C:\\Users\\Herve\\Dropbox\Projet\\Supervised Project\\credit_assoc.xls")
fread("sed 's/\\0//g' C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\credit_assoc.xls")
fread("file.choose()")
fread(file.choose())
fread("file.choose()")
fread(file.choose())
fread(file.choose())
data_cancer=fread(file.choose())
data_cancer=fread(file.choose())
data_cancer=fread(file.choose())
fread(file.choose())
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisidata.txt")
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisdata.txt")
str(data_fleurs)
data_fleurs
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisdata.txt")
require(data.table)
help(fread)
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisdata.txt")
setnames(data_fleurs,c("V1","V2","V3","V4","V5"),c("long_p","larg_p","long_o","larg_o","type"))
data_fleurs[,type,with=false]
data_fleurs[,type,with=false]
str(data.fleurs)
str(data_fleurs)
data_fleurs[,.(V1,V2)]
data_fleurs[,(V1,V2)]
data_fleurs-data.table(data_fleurs)
data_fleurs=data.table(data_fleurs)
data_fleurs[,.(V1,V2)]
data_fleurs[,(V1,V2)]
data_fleurs[,]
data_fleurs[,.TYPE]
data_fleurs[,sum(long_o]
data_fleurs[,sum(long_o)]
data_fleurs[,1:3]
data_fleurs[,type]
data_fleurs[,c(type, long_o)]
data_fleurs[,.c(type, long_o)]
data_fleurs[,.(type, long_o)]
data_fleurs[,type, long_o]
data_fleurs[,1,2]
data_fleurs[,(type, long_o)]
data_fleurs[(type, long_o)]
data_fleurs[c(type, long_o)]
data_fleurs[.(type,long_o),]
data_fleurs[,.(type,long_o)]
data_fleurs[, .(type,long_o)]
library
(
data.table
)
set.seed(
45
L)
DT
<
-
data.table
(
V1
=
c
(
1
L,
2
L
)
,
V2
=
LETTERS
[
1
:
3
]
,
V3
=
round
(
rnorm
(
4
)
,
4
)
,
V4
=
1
:
12
set.seed(45L)
data_fleurs[, .(type)]
data_fleurs[, ,.(type)]
data_fleurs[,mean(lonp_p) ,.(type)]
data_fleurs[,mean(lonp_p) ,type)]
data_fleurs[,mean(long_p) ,type)]
data_fleurs[,mean(long_p) ,type]
data_fleurs[long_p>6.5,mean(long_p) ,type]
data_fleurs[long_p>5.5,mean(long_p) ,type]
head(data_fleurs[,(long_p,type)])
head(data_fleurs[,list(long_p,type)])
library(XML)
library(data.table)
bears_statistics=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
bears_roster=readHTMLTable("http://www.chicagobears.com/team/roster.html")
bears_injury=readHTMLTable("http://www.chicagobears.com/team/injury-report.html")
str(bears_injury)
setwd("C:/Users/Herve/Dropbox/Projet/Projets R/March-Madness")
teams_seasons_url2=fread("teams_seasons_url.txt",sep=" ")
library(XML)
library(data.table)
require(RCurl)
require(plyr)
teams_seasons_url2=fread("teams_seasons_url.txt",sep=" ")
teams_seasons_url2=fread("teams_seasons_url.txt",sep=" ")
names_ts=fread("names_teams_seasons_url.txt",header=FALSE)
teams_seasons_url2=teams_seasons_url2[,V1:=NULL]
setnames(teams_seasons_url2,names(teams_seasons_url2),names_ts[,V2])
teams_seasons_url2
seasons_joueurs_nouveaux=teams_seasons_url2[season>=2010]
seasons_joueurs_anciens=teams_seasons_url2[season<2010]
ahmed=function(x){
readHTMLTable(seasons_joueurs_anciens[x,seasons_url])
}
kris=sapply(1:5,ahmed)
head(kris)
kirs[1,1]
kris[1,1]
names(kris)
kris[1,]
kris=lapply(1:5,ahmed)
kris=lapply(1:5,ahmed)
kris
kris=sapply(1:5,ahmed)
josue=do.call(rbind,kris[1,])
josue
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[x,seasons_url]
cbind(essaie,rep(seasons_joueurs_anciens[x,team_name],nrow(essaie)))
}
kris=sapply(1:5,ahmed)
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[x,seasons_url])
cbind(essaie,rep(seasons_joueurs_anciens[x,team_name],nrow(essaie)))
}
kris=sapply(1:5,ahmed)
seasons_joueurs_anciens
essaie=readHTMLTable(seasons_joueurs_anciens[1,seasons_url])
essaie
essaie=readHTMLTable(seasons_joueurs_anciens[1,seasons_url])
cbind(essaie$roster,rep(seasons_joueurs_anciens[1,team_name],nrow(essaie)))
essaie$roster
cbind(essaie$roster,rep(seasons_joueurs_anciens[1,team_name],nrow(essaie$roster)))
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[1,team_name],nrow(essaie$roster)))
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[1,seasons_url])
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[1,team_name],nrow(essaie$roster)))
}
kris=sapply(1:5,ahmed)
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[x,seasons_url])
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$roster)))
}
kris=sapply(1:5,ahmed)
kris
kris[1,1]
kris=lapply(1:5,ahmed)
kris
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[x,seasons_url])
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$roster)))
}
kris=lapply(1:5,ahmed)
kris
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$roster)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie$roster)))
essaie=readHTMLTable(seasons_joueurs_anciens[1,seasons_url])
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[1,team_name],nrow(essaie$roster)),season=rep(seasons_joueurs_anciens[1,season],nrow(essaie$roster)))
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[1,seasons_url])
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[1,team_name],nrow(essaie$roster)),season=rep(seasons_joueurs_anciens[1,season],nrow(essaie$roster)))
}
kris=lapply(1:5,ahmed)
josue=do.call(rbind,kris)
josue
ahmed=function(x){
essaie=readHTMLTable(seasons_joueurs_anciens[x,seasons_url])
cbind(essaie$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$roster)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie$roster)))
}
kris=lapply(1:5,ahmed)
josue=do.call(rbind,kris)
josue
essaie
str(essaie)
get_team_stats=function(x){
cbind(essaie$team_stats,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$team_stats)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie$team_stats)))
cbind(essaie$totals,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$totals)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie$totals)))
}
team_stats_players=lapply(1:5,get_team_stats)
team_stats_players=lapply(1:5,get_totals)
team_stats_players
get_team_stats=function(x){
evens1=cbind(essaie$team_stats,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$team_stats)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie$team_stats)))
evens3= cbind(essaie$totals,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie$totals)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie$totals)))
}
team_stats_players=lapply(1:5,get_team_stats)
team_stats_players=lapply(1:5,get_totals)
team_stats_players
essaie
get_everything=function(x){essaie=readHTMLTable(seasons_joueurs_anciens[x,seasons_url])}
lapply(1:3,get_everything)
get_roster=function(x){
cbind(essaie[[x]]$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie[[x]]$roster)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie[[x]]$roster)))
}
essaie
essaie=lapply(1:3,get_everything)
team_stats_players=lapply(1:5,get_roster)
essaie[[1]]$roster
cbind(essaie[[1]]$roster,team_name=rep(seasons_joueurs_anciens[1,team_name],nrow(essaie[[1]]$roster)),season=rep(seasons_joueurs_anciens[1,season],nrow(essaie[[1]]$roster)))
get_roster=function(x){
cbind(essaie[[x]]$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(essaie[[x]]$roster)),season=rep(seasons_joueurs_anciens[x,season],nrow(essaie[[x]]$roster)))
}
team_stats_players=lapply(1:5,get_roster)
team_stats_players=lapply(1:3,get_roster)
team_stats_players
get_everything=function(x){readHTMLTable(seasons_joueurs_anciens[x,seasons_url])}
get_roster=function(x){
cbind(everything_player[[x]]$roster,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$roster)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$roster)))
}
get_team_stats=function(x){
cbind(everything_player[[x]]$team_stats,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$team_stats)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$team_stats)))
}
get_totals=function(x){
cbind(everything_player[[x]]$totals,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$totals)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$totals)))
}
get_per_game=function(x){
cbind(everything_player[[x]]$per_game,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$per_game)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$per_game)))
}
get_per_min=function(x){
cbind(everything_player[[x]]$per_min,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$per_min)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$per_min)))
}
get_per_poss=function(x){
cbind(everything_player[[x]]$per_poss,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$per_poss)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$per_poss)))
}
get_advanced=function(x){
cbind(everything_player[[x]]$team_advanced,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$advanced)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$advanced)))
}
everything_player=lapply(1:5,get_everything)
roster_players=lapply(1:5,get_roster)
team_stats_players=lapply(1:5,get_team_stats)
totals_players=lapply(1:5,get_totals)
per_game_players=lapply(1:5,get_per_game)
per_min_players=lapply(1:5,get_per_min)
per_poss_players=lapply(1:5,get_per_poss)
advanced_players=lapply(1:5,get_advanced)
advanced_players
per_poss_players
per_min_players
per_game_players
totals_players
roster_players
everything_player
get_advanced=function(x){
cbind(everything_player[[x]]$advanced,team_name=rep(seasons_joueurs_anciens[x,team_name],nrow(everything_player[[x]]$advanced)),season=rep(seasons_joueurs_anciens[x,season],nrow(everything_player[[x]]$advanced)))
}
advanced_players=lapply(1:5,get_advanced)
advanced_players
data_roster=do.call(rbind,roster_players)
data_roster
data_roster=do.call(rbind,roster_players)
data_team_stats=do.call(rbind,team_stats_players)
data_totals=do.call(rbind,totals_players)
data_per_game=do.call(rbind,per_game_players)
data_per_min=do.call(rbind,per_min_players)
data_per_poss=do.call(rbind,per_poss_players)
data_advanced=do.call(rbind,advanced_players)
data_advanced
data_advanced
everything_player=lapply(1:20,get_everything)
roster_players=lapply(1:20,get_roster)
team_stats_players=lapply(1:20,get_team_stats)
totals_players=lapply(1:20,get_totals)
per_game_players=lapply(1:20,get_per_game)
per_min_players=lapply(1:20,get_per_min)
per_poss_players=lapply(1:20,get_per_poss)
advanced_players=lapply(1:20,get_advanced)
data_roster=do.call(rbind,roster_players)
data_team_stats=do.call(rbind,team_stats_players)
data_totals=do.call(rbind,totals_players)
data_per_game=do.call(rbind,per_game_players)
data_per_min=do.call(rbind,per_min_players)
data_per_poss=do.call(rbind,per_poss_players)
data_advanced=do.call(rbind,advanced_players)
data_roster
str(data_per_poss)
data_roster=data.table(do.call(rbind,roster_players))
data_team_stats=data.table(do.call(rbind,team_stats_players))
data_totals=data.table(do.call(rbind,totals_players))
data_per_game=data.table(do.call(rbind,per_game_players))
data_per_min=data.table(do.call(rbind,per_min_players))
data_per_poss=data.table(do.call(rbind,per_poss_players))
data_advanced=data.table(do.call(rbind,advanced_players))
data_advanced
readHTMLTable(seasons_joueurs_nouveaux[1,seasons_url])
get_everything_nouveaux=function(x){readHTMLTable(seasons_joueurs_nouveaux[1,seasons_url])}
get_advanced_conf_n=function(x){
cbind(everything_player[[x]]$advanced_conf,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$advanced_conf)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$advanced_conf)))
}
get_per_game_conf_n=function(x){
cbind(everything_player[[x]]$per_game_conf,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$per_game_conf)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$per_game_conf)))
}
get_per_min_conf_n=function(x){
cbind(everything_player[[x]]$per_min_conf,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$per_min_conf)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$per_min_conf)))
}
get_per_poss_conf_n=function(x){
cbind(everything_player[[x]]$per_poss_conf,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$per_poss_conf)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$per_poss_conf)))
}
get_totals_conf_n=function(x){
cbind(everything_player[[x]]$totals_conf,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$totals_conf)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$totals_conf)))
}
get_team_stats_conf_n=function(x){
cbind(everything_player[[x]]$team_stats_conf,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$team_stats_conf)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$team_stats_conf)))
}
get_roster_n=function(x){
cbind(everything_player[[x]]$roster,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$roster)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$roster)))
}
get_team_stats_n=function(x){
cbind(everything_player[[x]]$team_stats,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$team_stats)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$team_stats)))
}
get_totals_n=function(x){
cbind(everything_player[[x]]$totals,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$totals)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$totals)))
}
get_per_game_n=function(x){
cbind(everything_player[[x]]$per_game,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$per_game)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$per_game)))
}
get_per_min_n=function(x){
cbind(everything_player[[x]]$per_min,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$per_min)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$per_min)))
}
get_per_poss_n=function(x){
cbind(everything_player[[x]]$per_poss,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$per_poss)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$per_poss)))
}
get_advanced_n=function(x){
cbind(everything_player[[x]]$advanced,team_name=rep(seasons_joueurs_nouveaux[x,team_name],nrow(everything_player[[x]]$advanced)),season=rep(seasons_joueurs_nouveaux[x,season],nrow(everything_player[[x]]$advanced)))
}
get_everything_nouveaux=function(x){readHTMLTable(seasons_joueurs_nouveaux[x,seasons_url])}
everything_player=lapply(1:5,get_everything_n)
everything_player=lapply(1:5,get_everything_nouveaux)
roster_players_n=lapply(1:5,get_roster_n)
team_stats_players_n=lapply(1:5,get_team_stats_n)
totals_players_n=lapply(1:5,get_totals_n)
per_game_players_n=lapply(1:5,get_per_game_n)
per_min_players_n=lapply(1:5,get_per_min_n)
per_poss_players_n=lapply(1:5,get_per_poss_n)
advanced_players_n=lapply(1:5,get_advanced_n)
team_stats_conf_players_n=lapply(1:5,get_team_stats_conf_n)
totals_players_conf_n=lapply(1:5,get_totals_conf_n)
per_game_players_conf_n=lapply(1:5,get_per_game_conf_n)
per_min_players_conf_n=lapply(1:5,get_per_min_conf_n)
per_poss_players_conf_n=lapply(1:5,get_per_poss_conf_n)
advanced_players_conf_n=lapply(1:5,get_advanced_conf_n)
advanced_players_conf_n
data_roster_n=data.table(do.call(rbind,roster_players_n))
data_team_stats_n=data.table(do.call(rbind,team_stats_players_n))
data_totals_n=data.table(do.call(rbind,totals_players_n))
data_per_game_n=data.table(do.call(rbind,per_game_players_n))
data_per_min_n=data.table(do.call(rbind,per_min_players_n))
data_per_poss_n=data.table(do.call(rbind,per_poss_players_n))
data_advanced_n=data.table(do.call(rbind,advanced_players_n))
data_team_stats_conf_n=data.table(do.call(rbind,team_stats_players_conf_n))
data_totals_conf_n=data.table(do.call(rbind,totals_players_conf_n))
data_per_game_conf_n=data.table(do.call(rbind,per_game_players_conf_n))
data_per_min_conf_n=data.table(do.call(rbind,per_min_players_conf_n))
data_per_poss_conf_n=data.table(do.call(rbind,per_poss_players_conf_n))
data_advanced_conf_n=data.table(do.call(rbind,advanced_players_conf_n))
team_stats_players_conf_n=lapply(1:5,get_team_stats_conf_n)
data_team_stats_conf_n=data.table(do.call(rbind,team_stats_players_conf_n))
data_totals_conf_n
data_per_poss_conf_n
everything_player=lapply(1:20,get_everything_nouveaux)
roster_players_n=lapply(1:20,get_roster_n)
team_stats_players_n=lapply(1:20,get_team_stats_n)
totals_players_n=lapply(1:20,get_totals_n)
per_game_players_n=lapply(1:20,get_per_game_n)
per_min_players_n=lapply(1:20,get_per_min_n)
per_poss_players_n=lapply(1:20,get_per_poss_n)
advanced_players_n=lapply(1:20,get_advanced_n)
team_stats_players_conf_n=lapply(1:20,get_team_stats_conf_n)
totals_players_conf_n=lapply(1:20,get_totals_conf_n)
per_game_players_conf_n=lapply(1:20,get_per_game_conf_n)
per_min_players_conf_n=lapply(1:20,get_per_min_conf_n)
per_poss_players_conf_n=lapply(1:20,get_per_poss_conf_n)
advanced_players_conf_n=lapply(1:20,get_advanced_conf_n)
data_roster_n=data.table(do.call(rbind,roster_players_n))
data_team_stats_n=data.table(do.call(rbind,team_stats_players_n))
data_totals_n=data.table(do.call(rbind,totals_players_n))
data_per_game_n=data.table(do.call(rbind,per_game_players_n))
data_per_min_n=data.table(do.call(rbind,per_min_players_n))
data_per_poss_n=data.table(do.call(rbind,per_poss_players_n))
data_advanced_n=data.table(do.call(rbind,advanced_players_n))
data_team_stats_conf_n=data.table(do.call(rbind,team_stats_players_conf_n))
data_totals_conf_n=data.table(do.call(rbind,totals_players_conf_n))
data_per_game_conf_n=data.table(do.call(rbind,per_game_players_conf_n))
data_per_min_conf_n=data.table(do.call(rbind,per_min_players_conf_n))
data_per_poss_conf_n=data.table(do.call(rbind,per_poss_players_conf_n))
data_advanced_conf_n=data.table(do.call(rbind,advanced_players_conf_n))
data_advanced_conf_n
data_team_stats_conf_n
data_per_game_conf_n
gc()
ls()
rm(list=ls())
gc(reset=TRUE)
source("Fonction de recherches pour les joueursR")
source("Fonction de recherches pour les joueurs.R")
setwd("C:/Users/Herve/Dropbox/Projet/Projets R/March-Madness")
source("fonctions de recherches pour les joueurs.R")
everything_player=lapply(1:20,get_everything_a)
everything_player=lapply(1:20,get_everything_anciens)
teams_seasons_url2=fread("teams_seasons_url.txt",sep=" ")
teams_seasons_url2=fread("teams_seasons_url.txt",sep=" ")
names_ts=fread("names_teams_seasons_url.txt",header=FALSE)
teams_seasons_url2=teams_seasons_url2[,V1:=NULL]
setnames(teams_seasons_url2,names(teams_seasons_url2),names_ts[,V2])
seasons_joueurs_nouveaux=teams_seasons_url2[season>=2010]
seasons_joueurs_anciens=teams_seasons_url2[season<2010]
source("fonctions de recherches pour les joueurs.R")
everything_player=lapply(1:2,get_everything_anciens)
n_anciens=nrow(seasons_joueurs_anciens)
n_nouveaux=nrow(seasons_joueurs_nouveaux)
n_anciens
n_nouveaux
n_nouveaux+n_anciens
save.image("C:/Users/Herve/Dropbox/Projet/Projets R/March-Madness/Herve_workspace.RData")
